{"is_source_file": true, "format": "Python", "description": "This file defines API routes for managing connectors in a web service. It includes endpoints for listing connectors, retrieving connector details, toggling settings, probing capabilities, and starting jobs. It uses FastAPI for defining routes, Pydantic for request models, and interfaces with a manager module for connector management.", "external_files": ["src.connectors.manager", "src.models.schemas", "src.connectors.registry"], "external_methods": ["manager.list_connectors", "manager.run_probe", "manager.start_job", "registry.get", "inst.example_fields"], "published": ["list_connectors", "get_connector", "patch_connector", "probe_connector", "start_connector_job"], "classes": [{"name": "PatchConnectorRequest", "description": "Pydantic model representing the request payload for updating connector settings, specifically toggling the 'extraDetails' flag."}], "methods": [{"name": "Envelope list_connectors()", "description": "Returns a list of available connectors with minimal metadata.", "scope": "", "scopeKind": ""}, {"name": "Envelope get_connector( connector_id: str = Path(..., description=\"Connector identifier\"), )", "description": "Retrieves details of a specific connector, including example fields for UI.", "scope": "", "scopeKind": ""}, {"name": "Envelope patch_connector( connector_id: str, body: PatchConnectorRequest, )", "description": "Updates connector flags, specifically toggling the 'extra_details' setting.", "scope": "", "scopeKind": ""}, {"name": "Envelope probe_connector( connector_id: str, config: Dict[str, Any] = Body(default_factory=dict), )", "description": "Validates the connector configuration and performs a capabilities probe.", "scope": "", "scopeKind": ""}, {"name": "Envelope start_connector_job( connector_id: str, req: JobRequest, )", "description": "Starts an import, sync, or probe job for the specified connector.", "scope": "", "scopeKind": ""}], "calls": ["manager.list_connectors", "manager.run_probe", "manager.start_job", "registry.get", "inst.example_fields"], "search-terms": ["connectors", "API routes", "FastAPI endpoints", "connector management", "connector details", "probe", "start job"], "state": 2, "file_id": 16, "knowledge_revision": 33, "git_revision": "", "ctags": [{"_type": "tag", "name": "PatchConnectorRequest", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^class PatchConnectorRequest(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "extraDetails", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^    extraDetails: bool = Field(..., description=\"Toggle deep metadata\\/verbose sync\")$/", "language": "Python", "typeref": "typename:bool", "kind": "variable", "scope": "PatchConnectorRequest", "scopeKind": "class"}, {"_type": "tag", "name": "get_connector", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^async def get_connector($/", "language": "Python", "typeref": "typename:Envelope", "kind": "function", "signature": "( connector_id: str = Path(..., description=\"Connector identifier\"), )"}, {"_type": "tag", "name": "list_connectors", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^async def list_connectors() -> Envelope:$/", "language": "Python", "typeref": "typename:Envelope", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "patch_connector", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^async def patch_connector($/", "language": "Python", "typeref": "typename:Envelope", "kind": "function", "signature": "( connector_id: str, body: PatchConnectorRequest, )"}, {"_type": "tag", "name": "probe_connector", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^async def probe_connector($/", "language": "Python", "typeref": "typename:Envelope", "kind": "function", "signature": "( connector_id: str, config: Dict[str, Any] = Body(default_factory=dict), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^router = APIRouter(prefix=\"\\/connectors\", tags=[\"Connectors\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "start_connector_job", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/api/routes/connectors.py", "pattern": "/^async def start_connector_job($/", "language": "Python", "typeref": "typename:Envelope", "kind": "function", "signature": "( connector_id: str, req: JobRequest, )"}], "hash": "93a3c72d9fac1ead3246a6f53eac7468", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/api/routes/connectors.py", "fields": [{"name": "bool extraDetails", "scope": "PatchConnectorRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "router = APIRouter(prefix=\"\\/connectors\", tags=[\"Connectors\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"33": ""}]}
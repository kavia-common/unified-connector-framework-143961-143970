{"is_source_file": true, "format": "Python", "description": "This file defines an abstract base class 'BaseConnector' that specifies the required interface for connector implementations to interact with databases or SaaS providers. It includes abstract methods for validation, probing, and executing jobs, as well as some class attributes.", "external_files": ["abc", "typing"], "external_methods": ["abc.ABC", "abc.abstractmethod", "typing.Any", "typing.Dict", "typing.Literal", "typing.Optional"], "published": ["BaseConnector"], "classes": [{"name": "BaseConnector", "description": "Abstract connector interface for DB/SaaS providers. Defines required methods and attributes that all concrete connector implementations must provide."}], "methods": [{"name": "None __init__(self, connector_id: str, group: Literal[\"db\", \"saas\"], name: str)", "description": "Initializes the connector with an ID, group (either 'db' or 'saas'), and name.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "None validate(self, config: Dict[str, Any])", "description": "Abstract method to validate connector configuration, raising ValueError if invalid.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] probe(self, config: Dict[str, Any])", "description": "Abstract method to probe provider capabilities and metadata.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "str execute(self, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any])", "description": "Abstract method to start a job of specified type ('import' or 'sync') and return a job ID.", "scope": "BaseConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] example_fields(self)", "description": "Returns example configuration fields for UI display; default implementation returns an empty dictionary.", "scope": "BaseConnector", "scopeKind": "class"}], "calls": ["self.validate", "self.probe", "self.execute", "self.example_fields"], "search-terms": ["BaseConnector", "abstract class", "connector interface", "async methods", "validation", "probe", "execute", "connector_id", "group", "name"], "state": 2, "file_id": 12, "knowledge_revision": 26, "git_revision": "", "ctags": [{"_type": "tag", "name": "BaseConnector", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/base.py", "pattern": "/^class BaseConnector(ABC):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/base.py", "pattern": "/^    def __init__(self, connector_id: str, group: Literal[\"db\", \"saas\"], name: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, connector_id: str, group: Literal[\"db\", \"saas\"], name: str)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "example_fields", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/base.py", "pattern": "/^    def example_fields(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "execute", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/base.py", "pattern": "/^    async def execute(self, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params:/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any])", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "probe", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/base.py", "pattern": "/^    async def probe(self, config: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any])", "scope": "BaseConnector", "scopeKind": "class"}, {"_type": "tag", "name": "validate", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/base.py", "pattern": "/^    async def validate(self, config: Dict[str, Any]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, config: Dict[str, Any])", "scope": "BaseConnector", "scopeKind": "class"}], "hash": "49a5a36e39a769e32ee20925b948b441", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/connectors/base.py", "revision_history": [{"26": ""}]}
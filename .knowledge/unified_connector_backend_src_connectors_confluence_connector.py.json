{"is_source_file": true, "format": "Python", "description": "This file defines a Confluence connector class for integrating with Confluence's API. It implements methods for validating configuration, probing instance details, executing import or sync jobs, and managing spaces, pages, comments, and creating pages within Confluence.", "external_files": ["src.connectors.base", "src.core.logging_config", ".client", ".mapping", ".types"], "external_methods": ["get_logger", "BaseConnector.__init__", "ConfluenceConnectorConfig.model_validate", "ConfluenceClient.list_spaces", "ConfluenceClient.list_pages", "ConfluenceClient.list_comments", "ConfluenceClient.create_page", "map_space_to_container", "map_page_to_item", "map_comment_to_unified", "CreatePageRequest.model_validate"], "published": ["ConfluenceConnector"], "classes": [{"name": "ConfluenceConnector", "description": "A connector class for integrating with Confluence, implementing methods for space, page, comment management, and page creation."}], "methods": [{"name": "None validate(self, config: Dict[str, Any])", "description": "Validates the provided configuration against the ConfluenceConnectorConfig schema.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] probe(self, config: Dict[str, Any])", "description": "Checks connectivity and retrieves basic instance information based on the configuration.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "str execute(self, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any])", "description": "Runs an import or synchronization job based on the provided configuration and parameters.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] example_fields(self)", "description": "Returns a dictionary with example configuration fields for the connector.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "ConfluenceClient _client(self, cfg: ConfluenceConnectorConfig)", "description": "Internal method to instantiate and return a ConfluenceClient with proper authentication.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "ContainersResult containers(self, config: Dict[str, Any], limit: int = 50, cursor: Optional[str] = None)", "description": "Fetches Confluence spaces/containers and returns them as items.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "ItemsResult items(self, config: Dict[str, Any], container_id: Optional[str] = None, limit: int = 50, cursor: Optional[str] = None)", "description": "Retrieves pages/items within a specified container (space).", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "CommentsResult comments(self, config: Dict[str, Any], item_id: str, limit: int = 50, cursor: Optional[str] = None)", "description": "Retrieves comments on a specified item (page).", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] create(self, config: Dict[str, Any], body: Dict[str, Any])", "description": "Creates a new page in Confluence with the specified body content.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "None __init__(self)", "scope": "ConfluenceConnector", "scopeKind": "class", "description": "unavailable"}], "calls": ["asyncio.sleep", "uuid.uuid4", "ConfluenceConnectorConfig.model_validate", "ConfluenceClient.list_spaces", "ConfluenceClient.list_pages", "ConfluenceClient.list_comments", "ConfluenceClient.create_page", "client.close"], "search-terms": ["ConfluenceConnector", "confluence", "spaces", "pages", "comments", "create_page", "connector.py"], "state": 2, "file_id": 32, "knowledge_revision": 78, "git_revision": "", "ctags": [{"_type": "tag", "name": "ConfluenceConnector", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^class ConfluenceConnector(BaseConnector):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "_client", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def _client(self, cfg: ConfluenceConnectorConfig) -> ConfluenceClient:$/", "language": "Python", "typeref": "typename:ConfluenceClient", "kind": "member", "signature": "(self, cfg: ConfluenceConnectorConfig)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "_logger", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^_logger = get_logger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "comments", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def comments(self, config: Dict[str, Any], item_id: str, limit: int = 50, cursor: Opti/", "language": "Python", "typeref": "typename:CommentsResult", "kind": "member", "signature": "(self, config: Dict[str, Any], item_id: str, limit: int = 50, cursor: Optional[str] = None)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "containers", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def containers(self, config: Dict[str, Any], limit: int = 50, cursor: Optional[str] = /", "language": "Python", "typeref": "typename:ContainersResult", "kind": "member", "signature": "(self, config: Dict[str, Any], limit: int = 50, cursor: Optional[str] = None)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def create(self, config: Dict[str, Any], body: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], body: Dict[str, Any])", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "example_fields", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    def example_fields(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "execute", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def execute(self, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params:/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any])", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "items", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def items(self, config: Dict[str, Any], container_id: Optional[str] = None, limit: int/", "language": "Python", "typeref": "typename:ItemsResult", "kind": "member", "signature": "(self, config: Dict[str, Any], container_id: Optional[str] = None, limit: int = 50, cursor: Optional[str] = None)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "probe", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def probe(self, config: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any])", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "validate", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/confluence/connector.py", "pattern": "/^    async def validate(self, config: Dict[str, Any]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, config: Dict[str, Any])", "scope": "ConfluenceConnector", "scopeKind": "class"}], "hash": "bd370ebb3f3dc83b73302fec74b36563", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/connectors/confluence/connector.py", "fields": [{"name": "_logger = get_logger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"78": ""}]}
{"is_source_file": true, "format": "Python", "description": "This source file defines a 'ConnectorManager' class that orchestrates operations (listing connectors, running probes, starting jobs) over a registry of connector objects within a framework. It manages high-level interactions with connectors, providing an interface for other parts of the system to interact with various connectors.", "external_files": ["src.core.logging_config", ".registry", ".base"], "external_methods": ["get_logger", "registry.all", "registry.get", "BaseConnector.validate", "BaseConnector.probe", "BaseConnector.execute"], "published": ["manager"], "classes": [{"name": "ConnectorManager", "description": "High-level operations on connectors such as listing, probing, and starting jobs."}], "methods": [{"name": "List[Dict[str,Any]] list_connectors(self)", "description": "Returns a list of connectors with minimal info for UI listing.", "scope": "ConnectorManager", "scopeKind": "class"}, {"name": "Dict[str,Any] run_probe(self, connector_id: str, config: Dict[str, Any])", "description": "Validates configuration and runs a probe to retrieve capabilities metadata from a connector asynchronously.", "scope": "ConnectorManager", "scopeKind": "class"}, {"name": "str start_job( self, connector_id: str, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any] )", "description": "Validates configuration and starts a specified type of job ('import' or 'sync') asynchronously.", "scope": "ConnectorManager", "scopeKind": "class"}, {"name": "BaseConnector _require(self, connector_id: str)", "description": "Retrieves a connector instance from the registry by ID, raising an error if not found.", "scope": "ConnectorManager", "scopeKind": "class"}], "calls": ["registry.all()", "registry.get(connector_id)", "connector.validate(config)", "connector.probe(config)", "connector.execute(job_type, config, params)"], "search-terms": ["ConnectorManager", "registry", "start_job", "list_connectors", "run_probe", "Connector", "orchestrate connectors"], "state": 2, "file_id": 14, "knowledge_revision": 29, "git_revision": "", "ctags": [{"_type": "tag", "name": "ConnectorManager", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^class ConnectorManager:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_logger", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^_logger = get_logger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_require", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    def _require(self, connector_id: str) -> BaseConnector:$/", "language": "Python", "typeref": "typename:BaseConnector", "kind": "member", "signature": "(self, connector_id: str)", "scope": "ConnectorManager", "scopeKind": "class"}, {"_type": "tag", "name": "list_connectors", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    def list_connectors(self) -> List[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "member", "signature": "(self)", "scope": "ConnectorManager", "scopeKind": "class"}, {"_type": "tag", "name": "manager", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^manager = ConnectorManager()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "run_probe", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    async def run_probe(self, connector_id: str, config: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, connector_id: str, config: Dict[str, Any])", "scope": "ConnectorManager", "scopeKind": "class"}, {"_type": "tag", "name": "start_job", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    async def start_job($/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "( self, connector_id: str, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any] )", "scope": "ConnectorManager", "scopeKind": "class"}], "hash": "c855830f53a7272b16d6883312a44b43", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/connectors/manager.py", "fields": [{"name": "_logger = get_logger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "manager = ConnectorManager()", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"29": ""}]}
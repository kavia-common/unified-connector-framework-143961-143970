{"is_source_file": true, "format": "Python", "description": "This source file defines a `ConnectorManager` class that orchestrates operations over a registry of connectors, including listing connectors, running probes, and starting jobs. It encapsulates high-level operations and interacts with `BaseConnector` instances from the registry.", "external_files": ["src.core.logging_config", "./registry", "./base"], "external_methods": ["get_logger", "registry.all", "registry.get"], "published": ["manager"], "classes": [{"name": "ConnectorManager", "description": "Provides high-level methods to list, probe, and start jobs with connectors."}], "methods": [{"name": "List[Dict[str,Any]] list_connectors(self)", "description": "Returns a list of minimal info about all registered connectors for UI listing.", "scope": "ConnectorManager", "scopeKind": "class"}, {"name": "Dict[str,Any] run_probe(self, connector_id: str, config: Dict[str, Any])", "description": "Validates configuration and runs a probe to retrieve capabilities metadata asynchronously.", "scope": "ConnectorManager", "scopeKind": "class"}, {"name": "str start_job( self, connector_id: str, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any] )", "description": "Validates configuration and initiates a job (import or sync) asynchronously, returning a job ID.", "scope": "ConnectorManager", "scopeKind": "class"}, {"name": "BaseConnector _require(self, connector_id: str)", "description": "Retrieves a `BaseConnector` instance by connector ID, raising an error if not found.", "scope": "ConnectorManager", "scopeKind": "class"}], "calls": ["registry.all", "registry.get", "_logger.info", "connector.validate", "connector.probe", "connector.execute"], "search-terms": ["ConnectorManager", "registry", "run_probe", "start_job", "list_connectors", "BaseConnector", "orchestrates", "register", "connector_id"], "state": 2, "file_id": 14, "knowledge_revision": 53, "git_revision": "bd31475813d25d18f20aff49f24e24df16edecf9", "revision_history": [{"29": ""}, {"53": "bd31475813d25d18f20aff49f24e24df16edecf9"}], "ctags": [{"_type": "tag", "name": "ConnectorManager", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^class ConnectorManager:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_logger", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^_logger = get_logger(__name__)$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_require", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    def _require(self, connector_id: str) -> BaseConnector:$/", "language": "Python", "typeref": "typename:BaseConnector", "kind": "member", "signature": "(self, connector_id: str)", "scope": "ConnectorManager", "scopeKind": "class"}, {"_type": "tag", "name": "list_connectors", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    def list_connectors(self) -> List[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "member", "signature": "(self)", "scope": "ConnectorManager", "scopeKind": "class"}, {"_type": "tag", "name": "manager", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^manager = ConnectorManager()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "run_probe", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    async def run_probe(self, connector_id: str, config: Dict[str, Any]) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, connector_id: str, config: Dict[str, Any])", "scope": "ConnectorManager", "scopeKind": "class"}, {"_type": "tag", "name": "start_job", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/connectors/manager.py", "pattern": "/^    async def start_job($/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "( self, connector_id: str, job_type: Literal[\"import\", \"sync\"], config: Dict[str, Any], params: Dict[str, Any] )", "scope": "ConnectorManager", "scopeKind": "class"}], "hash": "7f61eac4416cfc989ce787ad0f0a0f46", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/connectors/manager.py", "fields": [{"name": "_logger = get_logger(__name__)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "manager = ConnectorManager()", "scope": "", "scopeKind": "", "description": "unavailable"}]}
{"is_source_file": true, "format": "Python", "description": "This file provides helper functions for managing MongoDB collections related to connection management, token storage, synchronization state, and auditing within a larger backend system. It includes functions for upserting connection records, storing encrypted tokens, fetching tokens, managing sync cursors, and appending audit logs.", "external_files": ["src/db/mongo", "src/services/encryption"], "external_methods": ["mongo_db()", "get_encryption_service()", "enc.encrypt()", "enc.decrypt()"], "published": ["upsert_connection", "store_token", "fetch_token_plaintext", "put_sync_state", "get_sync_state", "append_audit"], "classes": [], "methods": [{"name": "AsyncIOMotorCollection _col(name: str)", "description": "Internal helper to retrieve a MongoDB collection by name.", "scope": "", "scopeKind": ""}, {"name": "str upsert_connection(workspace_id: str, connector_id: str, name: str, config: Dict[str, Any])", "description": "Creates or updates a connection record in the 'connections' collection; returns the connection ID.", "scope": "", "scopeKind": ""}, {"name": "str store_token(connection_id: str, token_plaintext: str, expires_at: Optional[datetime])", "description": "Encrypts and stores a token for a specific connection; returns the token record ID.", "scope": "", "scopeKind": ""}, {"name": "Optional[str] fetch_token_plaintext(connection_id: str)", "description": "Fetches the latest encrypted token for a connection and decrypts it.", "scope": "", "scopeKind": ""}, {"name": "None put_sync_state(connection_id: str, cursor: Optional[str])", "description": "Updates or inserts the synchronization state cursor for a connection.", "scope": "", "scopeKind": ""}, {"name": "Optional[str] get_sync_state(connection_id: str)", "description": "Retrieves the current sync cursor for a connection.", "scope": "", "scopeKind": ""}, {"name": "str append_audit(actor: str, action: str, target_type: str, target_id: str, meta: Dict[str, Any])", "description": "Logs an audit event with details about actor, action, target, and metadata.", "scope": "", "scopeKind": ""}], "calls": ["mongo_db()", "get_encryption_service()", "enc.encrypt()", "enc.decrypt()"], "search-terms": ["collections helper", "MongoDB connection", "token encryption", "sync state", "audit logs", "async MongoDB functions"], "state": 2, "file_id": 11, "knowledge_revision": 54, "git_revision": "bd31475813d25d18f20aff49f24e24df16edecf9", "revision_history": [{"23": ""}, {"54": "bd31475813d25d18f20aff49f24e24df16edecf9"}], "ctags": [{"_type": "tag", "name": "_col", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/models/collections.py", "pattern": "/^def _col(name: str) -> AsyncIOMotorCollection:$/", "language": "Python", "typeref": "typename:AsyncIOMotorCollection", "kind": "function", "signature": "(name: str)"}, {"_type": "tag", "name": "append_audit", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/models/collections.py", "pattern": "/^async def append_audit(actor: str, action: str, target_type: str, target_id: str, meta: Dict[str/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(actor: str, action: str, target_type: str, target_id: str, meta: Dict[str, Any])"}, {"_type": "tag", "name": "fetch_token_plaintext", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/models/collections.py", "pattern": "/^async def fetch_token_plaintext(connection_id: str) -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(connection_id: str)"}, {"_type": "tag", "name": "get_sync_state", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/models/collections.py", "pattern": "/^async def get_sync_state(connection_id: str) -> Optional[str]:$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "function", "signature": "(connection_id: str)"}, {"_type": "tag", "name": "put_sync_state", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/models/collections.py", "pattern": "/^async def put_sync_state(connection_id: str, cursor: Optional[str]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(connection_id: str, cursor: Optional[str])"}, {"_type": "tag", "name": "store_token", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/models/collections.py", "pattern": "/^async def store_token(connection_id: str, token_plaintext: str, expires_at: Optional[datetime]) /", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(connection_id: str, token_plaintext: str, expires_at: Optional[datetime])"}, {"_type": "tag", "name": "upsert_connection", "path": "/home/kavia/workspace/code-generation/unified-connector-framework-143961-143970/unified_connector_backend/src/models/collections.py", "pattern": "/^async def upsert_connection(workspace_id: str, connector_id: str, name: str, config: Dict[str, A/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(workspace_id: str, connector_id: str, name: str, config: Dict[str, Any])"}], "hash": "31f3fe8d8435dc4937e70d57bfc9ccfa", "format-version": 4, "code-base-name": "unified_connector_backend", "filename": "unified_connector_backend/src/models/collections.py"}